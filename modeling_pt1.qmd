---
title: "Logistic Regression"
author: "Hailey Quintavalle"
format: html
---


```{r message = F, warning = F}
library(tidyverse)
```

```{r message = F}
movies_og <- read_csv("data/basics_movies.csv")
movies.model <- movies.model |>separate_rows(genres, sep = ",") # movies appear multiple times for multiple genres
movies.model <- movies.model |> mutate(binary = if_else(rating == 3, "1", "0")) |> 
  mutate(binary = as.numeric(binary)) |>
  filter(!genres %in% c("News", "Adult", "Talk-Show", "\\N")) |>
  relocate(binary)

movies.model
```


```{r}
logit_model <- glm(factor(binary) ~ genres + year, data = movies.model, family = binomial)
summary(logit_model)    # after only taking out movies with low count, AIC: 32893

inter_model <- glm(factor(binary) ~ genres + year + genres*year, data = movies.model, family = binomial)
summary(inter_model)  ## AIC: 32787


# quadratic term for year?
# try different variables maybe?
# indicator variables for genres?

movies.model$genres |> table()
```


## Plot model

```{r}
ggplot(movies.model, aes(x=year, y= binary)) + 
  geom_point(alpha=.5) + 
  stat_smooth(method="glm", se=FALSE, method.args = list(family=binomial))
```

-------------------------------------------------------------------------------------------------------------------




```{r warning = F, message = F}
## create indicator variables for each genre and pivot wider --> need to have 0s and 1s for each category so each movie has one row.  movies can have 1s in multiple genres

movies_indi <- read_csv("data/movies_indicator.csv")
movies_indi |> head()
```

# create new data set where each movie has just one genre --> filter out these years in the grid

this will allow for augmenting with all of the genres in the set

create data set with one column for genre so we can plot the models but facet by the genre

create model with all movie genres

look into interactions between genres (do you think the combination of certain movies will affect the likelihood of passing the test?)


### Look into Section 10 from data viz class

Create model

```{r}
library(broom)
```


```{r}
mod2 <- glm(factor(binary) ~ year + Animation + Action + Adult + Adventure  
             + Biography + Comedy + Crime + Documentary + Drama + Family + 
              Fantasy + History + Horror + Music + Musical + Mystery + Romance + 
              Short + Sport + Thriller + War + Western, 
            family = "binomial", data = movies_indi)

mod2 |> tidy()
```


## Plotting the model 

### Creating grid of predictor values
```{r}
library(modelr)
grid <- movies_indi |>
  data_grid(
    year = seq_range(year, n = 6),
    binary = c(0, 1),
    Action = c(0, 1),
    Adult = c(0, 1),
    Adventure = c(0, 1),
    Animation = c(0, 1)
  ) 

grid

# create grid with all genres
# mutate sum variable with all genres
# filter out sum greater than 1 or if the sum is 0 
# delete new sum variable 
```

```
aug_movies <- augment(mod2, newdata = grid, se_fit = TRUE)
aug_movies
```

```{r}
aug_movies <- aug_movies |> mutate(.pi = exp(.fitted) / (1 + exp(.fitted))) ## change odds to probabilities
```

```{r}
ggplot(aug_movies, aes(x = year, y = .pi)) +
#  geom_point(data = movies_indi, aes(x = year, y = binary)) +
  geom_smooth(method = "glm") +
  theme_minimal()
```


### Comparing models with only Action and only Comedy

```{r}
movies_indi <- movies_indi |> mutate(binary = as.factor(binary))
mod_action <- glm(binary ~ year + Action + year*Action, 
                  family = "binomial", data = movies_indi)   # AIC shows better with interaction included

mod_comedy <- glm(binary ~ year + Comedy + year*Comedy, 
                  family = "binomial", data = movies_indi) 
```


Combine fitted values from both models into one data set
```{r}
grid_action <- movies_indi |>
  data_grid(
    year = seq_range(year, n = 6),
    binary = c(0, 1),
    Action = c(0, 1)
  ) 

grid_comedy <- movies_indi |>
  data_grid(
    year = seq_range(year, n = 6),
    binary = c(0, 1),
    Comedy = c(0, 1)
  ) 

aug_action <- augment(mod_action, newdata = grid_action, se_fit = TRUE)
aug_comedy <- augment(mod_comedy, newdata = grid_comedy, se_fit = TRUE)

plot_df <- bind_rows(lst(aug_action, aug_comedy), .id = "model")
plot_df
```

```{r}
plot_df <- plot_df |> mutate(.pi = exp(.fitted) / (1 + exp(.fitted)))  # change odds to probabilities
```


```{r message = F}
ggplot(plot_df, aes(x = year, y = .pi)) +
  geom_smooth(method = "glm", aes(color = model)) +
  theme_minimal()
```

Notes from 2/22 (that i can remember) 

- use pivot longer to create genres column with names

- use data set to create faceted line plots for each genre

- create model with all genres -> try to plot?


```{r}
genre_plot <- movies_indi |> pivot_longer(c(Animation, Action, Adult, Adventure, Biography, Comedy, 
                  Crime, Documentary, Drama, Family, Fantasy, History, 
                  Horror, Music, Musical, Mystery, Romance, Short, 
                  Sport, Thriller, War, Western)) |>
  rename("genre" = "name") |>
  select(-`NA`, -`Sci-Fi`, -`Film-Noir`, -News, `Talk-Show`)

genre_plot
```


```{r}
grid <- genre_plot |>
  data_grid(
    year = seq_range(year, n = 6),
    binary = c(0, 1),
    genre = c("Animation", "Action", "Adult", "Adventure", "Biography", "Comedy", 
                  "Crime", "Documentary", "Drama", "Family", "Fantasy", "History", 
                  "Horror", "Music", "Musical", "Mystery", "Romance", "Short", 
                  "Sport", "Thriller", "War", "Western"))

genre_model <- glm(binary ~ year + genre, data = genre_plot, family = "binomial")
genre_model |> tidy()

aug_genre_model <- augment(genre_model, newdata = grid, se_fit = TRUE)  ## cannot match these up because predictors                                                                         and variables are different - but I cannot                                                                          create grid with all genres separately
aug_genre_model
```


```{r}
ggplot(data = aug_genre_model, aes(x = year, y = .fitted)) +
  geom_line() +
  facet_wrap(~ genre)   
```


- Make separate plot for each genre after augmenting with model 

- pivot after augment .fitted values (if not working make separate plots)


### Creating grid of predictor values

```{r}
library(modelr)
grid1 <- movies_indi |>
  data_grid(
    year = seq_range(year, n = 6),
    binary = c(0, 1),
    Animation = c(0, 1),
    Action = c(0, 1),
    Adult = c(0, 1),
    Adventure = c(0, 1),
    Biography = c(0, 1),
    Comedy = c(0, 1),
    Crime = c(0, 1),
    Documentary = c(0, 1),
    Drama = c(0, 1),
    Family = c(0, 1),
    Fantasy = c(0, 1),
    History = c(0, 1),
    Horror = c(0, 1),
    Music = c(0, 1),
    Musical = c(0, 1),
    Mystery = c(0, 1),
    Romance = c(0, 1),
    Short = c(0, 1),
    Sport = c(0, 1),
    Thriller = c(0, 1),
    War = c(0, 1),
    Western = c(0, 1)
  )


new_grid <- grid1 |> mutate(sum = Animation + Action + Adult + Adventure  
             + Biography + Comedy + Crime + Documentary + Drama + Family + 
              Fantasy + History + Horror + Music + Musical + Mystery + Romance + 
              Short + Sport + Thriller + War + Western) |>
  filter(sum == 1) |> 
  select(-sum)

new_grid

# create grid with all genres 
# mutate sum variable with all genres 
# filter out sum greater than 1 or if the sum is 0 
# delete new sum variable 
```

```{r}
aug_mod2 <- augment(mod2, newdata = new_grid, se_fit = TRUE)

aug_mod2 <- aug_mod2 |> mutate(.pi = exp(.fitted) / (1 + exp(.fitted)))
```


```{r}
list2 <- aug_mod2 |> pivot_longer(cols = c(Animation, Action, Adult, Adventure, Biography, Comedy, 
                                           Crime, Documentary, Drama, Family, Fantasy, History, 
                                           Horror, Music, Musical, Mystery, Romance, Short, 
                                           Sport, Thriller, War, Western), names_to = "genre", values_to = "values")
```

```{r}
movies_pass <- movies_indi |> filter(binary == 1)
movies_fail <- movies_indi |> filter(binary == 0)
```


```{r}
list2 |> filter(values == 1) |> 
  ggplot(aes(x = year, y = .pi)) +
  geom_line(linewidth = 0.8) +
  ## geom_rug(data = movies_pass, aes(x = year, y = as.numeric(binary)), sides = "t") + 
  facet_wrap(~ genre)
```

```{r}
mod3 <- glm(factor(binary) ~ year + Animation + Action + Adult + Adventure +
              Biography + Comedy + Crime + Documentary + Drama +
              Family + Fantasy + History + Horror + Music +
              Musical + Mystery + Romance + Short + Sport +
              Thriller + War + Western +
              year:Animation + year:Action + year:Adult + year:Adventure +
              year:Biography + year:Comedy + year:Crime + year:Documentary + year:Drama +
              year:Family + year:Fantasy + year:History + year:Horror + year:Music +
              year:Musical + year:Mystery + year:Romance + year:Short + year:Sport +
              year:Thriller + year:War + year:Western, 
            family = "binomial", data = movies_indi)

mod3 |> glance()  ## AIC is 12935, BIC is 13267.67	
mod2 |> glance()  ## AIC is 12988, BIC is 13161.92
```

```{r}
aug_mod3 <- augment(mod3, newdata = new_grid, se_fit = TRUE)

aug_mod3 <- aug_mod3 |> mutate(.pi = exp(.fitted) / (1 + exp(.fitted)))

list3 <- aug_mod3 |> pivot_longer(cols = c(Animation, Action, Adult, Adventure, Biography, Comedy, 
                                           Crime, Documentary, Drama, Family, Fantasy, History, 
                                           Horror, Music, Musical, Mystery, Romance, Short, 
                                           Sport, Thriller, War, Western), names_to = "genre", values_to = "values")
```


```{r}
list3 |> filter(values == 1) |> 
  ggplot(aes(x = year, y = .pi)) +
  geom_rug(data = movies_pass, aes(x = year, y = as.numeric(binary)), sides = "t") +
  geom_rug(data = movies_fail, aes(x = year, y = as.numeric(binary)), sides = "b") + 
  geom_line(linewidth = 0.8) +
  facet_wrap(~ genre)
```

```{r}
list2 |> filter(values == 1, genre != "Adult") |> 
  ggplot(aes(x = year, y = .pi)) + 
  geom_rug(data = movies_pass, aes(x = year, y = as.numeric(binary)), sides = "t") +  ## why is this changing the axis
  geom_rug(data = movies_fail, aes(x = year, y = as.numeric(binary)), sides = "b") + 
  geom_line(aes(color = genre), linewidth = 0.8) +
  scale_y_continuous(breaks = seq(0, 1, by = 0.1), limits = c(0, 1)) +
  theme_minimal()
 
```

```{r}
## pick ~ 6 genres for this plot
## clean up plot

list3 |> filter(values == 1, genre != "Adult") |> 
  ggplot(aes(x = year, y = .pi)) + 
  geom_line(aes(color = genre), linewidth = 0.8) + 
  geom_rug(data = movies_pass, aes(x = year, y = as.numeric(binary)), sides = "t") +  ## why is this changing the axis
  geom_rug(data = movies_fail, aes(x = year, y = as.numeric(binary)), sides = "b") + 
  scale_y_continuous(breaks = seq(0, 1, by = 0.1), limits = c(0, 1)) + 
  theme_minimal() +
  labs(x = "Year", y = "Probabilty of Passing\n", color = "Genre")
```

```{r}
list3 |> filter(values == 1, genre %in% c("Sport", "Comedy", "Romance", "Action", "Documentary", "War", "Western")) |> 
  mutate(genre = fct_reorder2(genre, .x = year, .y = .pi)) |>
  ggplot(aes(x = year, y = .pi)) +                      # need to pick which genres to keep in visual
  geom_line(aes(color = genre), linewidth = 0.8) + 
  geom_rug(data = movies_pass, aes(x = year, y = as.numeric(binary)), sides = "t") +  ## alpha = 0.4
  geom_rug(data = movies_fail, aes(x = year, y = as.numeric(binary)), sides = "b") +  
  scale_y_continuous(breaks = seq(0, 1, by = 0.1), limits = c(0, 1)) + 
  theme_minimal() +
  labs(x = "\nYear",
       y = "Probabilty of Passing\n", 
       color = "Genre",
       title = "Different Genres Passing the Bechdel Test Over Time") +
  scale_color_viridis_d()  ## make font and lines bigger for poster
```




